#!/bin/bash -l
#PBS -l walltime=4:00:00,nodes=50:ppn=8,pmem=2500mb
#PBS -m abe
#PBS -M harwe006@umn.edu

################################################################################
# Setup Simulation Environment                                                 #
################################################################################

# Initialize modules
source /home/gini/shared/swarm/bin/build-env-setup.sh

# Add ARGoS libraries to system library search path, since they are in a
# non-standard location
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SWARM_ROOT/$MSICLUSTER/lib/argos3

# Set ARGoS library search path. Must contain both the ARGoS core libraries path
# AND the fordyca library path.
export ARGOS_PLUGIN_PATH=$SWARM_ROOT/$MSICLUSTER/lib/argos3:$HOME/git/fordyca/build/lib

# Setup logging (maybe compiled out and unneeded, but maybe not)
export LOG4CXX_CONFIGURATION=$HOME/git/fordyca/log4cxx.xml

# From MSI docs: transfers all of the loaded modules to the compute nodes (not
# inherited from the master/launch node when using GNU parallel)
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env
LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env
MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env
OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env
OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY
--env ARGOS_PLUGIN_PATH --env LOG4CXX_CONFIGURATION"

################################################################################
# Non-batch Parameters                                                         #
################################################################################
# Med block, high speed: block density = 5.0%, static cache % = 10.0, max speed
# = 10.0
#
# 32x16: 25 blocks, static cache respawn = 3
# 64x32: 100 blocks, static cache respawn = 10
# 96x48: 230 blocks, static cache respawn = 23
#
# High block, high speed: block density = 10.0%, static cache % = 10.0, max
# speed = 10.0
#
# 32x16: 50 blocks, static cache respawn = 5
# 64x32: 200 blocks, static cache respawn = 20
# 96x48: 460 blocks, static cache respawn = 46

################################################################################
# Begin Experiments                                                            #
################################################################################
NSIMS=4
CONTROLLERS=(depth0.CRW depth0.DPO depth1.BITD_DPO depth2.BIRTD_DPO)
OUTPUT_ROOT=$HOME/exp/test
BASE_CMD="python3 sierra.py \
                  --sierra-root=$OUTPUT_ROOT \
                  --template-input-file=$HOME/git/sierra/templates/ideal.argos \
                  --n-sims=$NSIMS\
                  --physics-n-engines=8\
                  --pipeline 1\
                  --plugin=fordyca\
                  --hpc-env=local \
                  --time-setup=time_setup.T100000"

cd $HOME/git/sierra

# Robustness analysis
for c in "${CONTROLLERS[@]}"
do
    # Steady state population of 10 when total swarm size is 50 (repair queue steady state of 40)
    $BASE_CMD --scenario=SS.32x16 \
              --batch-criteria population_dynamics.F2p0.M0p001.R0p00102501 saa_noise.all.C5.Z50\
              --controller=${c}

    # Steady state population of 40 when total swarm size is 200 (repair queue steady state of 160)
    $BASE_CMD --scenario=RN.48x48 \
              --batch-criteria population_dynamics.F2p0.M0p001.R0p00100625 saa_noise.all.C5.Z200\
              --controller=${c}
done

# Scalability/emergence analysis
for c in "${CONTROLLERS[@]}"
do
    $BASE_CMD --scenario=SS.32x16 \
              --batch-criteria population_size.Log128 population_dynamics.F2p0.M0p001.R0p00102501\
              --controller=${c}

    $BASE_CMD --scenario=RN.48x48 \
              --batch-criteria population_size.Log2048 population_dynamics.F2p0.M0p001.R0p00100625\
              --controller=${c}
done

for c in "${CONTROLLERS[@]}"
do
    $BASE_CMD --scenario=SS.32x16 \
              --batch-criteria population_size.Log128 saa_noise.all.C5\
              --controller=${c}

    $BASE_CMD --scenario=RN.48x48 \
              --batch-criteria population_size.Log2048 saa_noise.all.C5\
              --controller=${c}
done

# Generate comparison graphs
python3 sierra.py \
        --pipeline 5\
        --plugin=fordyca\
        --sierra-root=$OUTPUT_ROOT\
        --batch-criteria population_size.Log256\
        --bc-univar
