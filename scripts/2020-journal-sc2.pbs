#!/bin/bash -l
#PBS -l walltime=4:00:00,nodes=50:ppn=8,pmem=2500mb
#PBS -m abe
#PBS -M harwe006@umn.edu

################################################################################
# Setup Simulation Environment                                                 #
################################################################################

# Initialize modules
source /home/gini/shared/swarm/bin/msi-env-setup.sh

# Add ARGoS libraries to system library search path, since they are in a
# non-standard location
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SWARM_ROOT/$MSICLUSTER/lib/argos3

# Set ARGoS library search path. Must contain both the ARGoS core libraries path
# AND the fordyca library path.
export ARGOS_PLUGIN_PATH=$SWARM_ROOT/$MSICLUSTER/lib/argos3:$HOME/git/fordyca/build/lib

# Setup logging (maybe compiled out and unneeded, but maybe not)
export LOG4CXX_CONFIGURATION=$HOME/git/fordyca/log4cxx.xml

# From MSI docs: transfers all of the loaded modules to the compute nodes (not
# inherited from the master/launch node when using GNU parallel)
export PARALLEL="--workdir . --env PATH --env LD_LIBRARY_PATH --env
LOADEDMODULES --env _LMFILES_ --env MODULE_VERSION --env MODULEPATH --env
MODULEVERSION_STACK --env MODULESHOME --env OMP_DYNAMICS --env
OMP_MAX_ACTIVE_LEVELS --env OMP_NESTED --env OMP_NUM_THREADS --env
OMP_SCHEDULE --env OMP_STACKSIZE --env OMP_THREAD_LIMIT --env OMP_WAIT_POLICY
--env ARGOS_PLUGIN_PATH --env LOG4CXX_CONFIGURATION"

################################################################################
# Begin Experiments                                                            #
################################################################################
NSIMS=4
CONTROLLERS=(depth0.CRW depth0.DPO depth1.BITD_DPO depth2.BIRTD_DPO)
OUTPUT_ROOT=$HOME/exp/sc2
DENSITY=5p0 # 1280 robots max with cardinality = 10
N_BLOCKS=512
BLOCK_DIST=PL
CARDINALITY=4
TIME_SHORT=20000
TIME_LONG=100000

BASE_CMD="python3 sierra.py \
                  --sierra-root=$OUTPUT_ROOT \
                  --template-input-file=$HOME/git/sierra/templates/2020-journal-sc2.argos \
                  --n-sims=$NSIMS\
                  --physics-n-engines=4\
                  --pipeline 3 --exp-graphs=inter\
                  --project=fordyca\
                  --hpc-env=hpc_local \
                  --exp-overwrite"

TASK="$1"

cd $HOME/git/sierra

# # Scalability/emergence analysis
if [ "$TASK" == "scalability" ] || [ "$TASK" == "emergence" ] || [ "$TASK" == "all" ]
then
    for c in "${CONTROLLERS[@]}"
    do
        $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
                  --batch-criteria population_density.CD${DENSITY}.I16.C${CARDINALITY} block_motion_dynamics.C${CARDINALITY}.F25p0.RW0p001\
                  --controller=${c} \
                  --n-blocks=${N_BLOCKS}\
                  --time-setup=time_setup.T${TIME_SHORT}

    done
fi

# Flexibility analysis.
if [ "$TASK" == "flexibility" ] || [ "$TASK" == "all" ]
then
    for c in "${CONTROLLERS[@]}"
    do
        $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
                  --batch-criteria  population_density.CD${DENSITY}.I16.C${CARDINALITY} temporal_variance.MStepU50000\
                  --controller=${c}\
                  --n-blocks=${N_BLOCKS}\
                  --time-setup=time_setup.T${TIME_SHORT}

        $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
                  --batch-criteria   population_density.CD${DENSITY}.I16.C${CARDINALITY} temporal_variance.MStepD50000\
                  --controller=${c}\
                  --n-blocks=${N_BLOCKS}\
                  --time-setup=time_setup.T${TIME_SHORT}

        $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
                  --batch-criteria  population_density.CD${DENSITY}.I16.C${CARDINALITY} temporal_variance.MSine\
                  --controller=${c}\
                  --n-blocks=${N_BLOCKS}\
                  --time-setup=time_setup.T${TIME_SHORT}

    done
fi

# Robustness analysis.
if [ "$TASK" == "robustness" ] || [ "$TASK" == "all" ]
then
    for c in "${CONTROLLERS[@]}"
    do
        # Depending on what Maria/reviewers say, I might have to add birth
        # dynamics to this to have a stable queueing system and get graph axis
        # ticks that are well defined.
        # $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
        #           --batch-criteria  population_density.CD${DENSITY}.I16.C${CARDINALITY} population_dynamics.C${CARDINALITY}.F2p0.D0p0001 \
        #           --controller=${c} \
        #           --n-blocks=${N_BLOCKS}\
        #           --time-setup=time_setup.T${TIME_LONG}

        $BASE_CMD --scenario=${BLOCK_DIST}.16x16 \
                  --batch-criteria    population_density.CD${DENSITY}.I16.C${CARDINALITY} saa_noise.all.C${CARDINALITY}\
                  --controller=${c} \
                  --n-blocks=${N_BLOCKS}\
                  --time-setup=time_setup.T${TIME_SHORT}
    done
fi
