# Copyright 2018 London Lowmanstone, John Harwell, All rights reserved.
#
#  This file is part of SIERRA.
#
#  SIERRA is free software: you can redistribute it and/or modify it under the
#  terms of the GNU General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later
#  version.
#
#  SIERRA is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
#  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with
#  SIERRA.  If not, see <http://www.gnu.org/licenses/
"""
Experiment generation classes, generating definitions common to all batched experiments, as well as
definitions generated by the controller+scenario. Generated definitions from batch criteria are not
handled here.
"""

# Core packages
import os
import typing as tp
import logging

# 3rd party packages

# Project packages
from sierra.core.xml_luigi import XMLLuigi
from sierra.core.variables import cameras
import sierra.core.generators.generator_factory as gf
import sierra.core.xml_luigi
from sierra.core.experiment_spec import ExperimentSpec
import sierra.core.variables.time_setup as ts
import sierra.core.variables.rendering as rendering
import sierra.core.variables.batch_criteria as bc
import sierra.core.utils as utils
import sierra.core.config as config


class ARGoSExpDefGenerator:
    """
    Base class for generating sets of changes to a template input file that will form the definition
    for a single experiment within a batch that are common to all types of batch
    experiments (i.e., only utilize things explicitly supported by ARGoS in XML). Changes for:

      - Visualizations
      - Threading
      - Simulation time parameters
      - Disabling sensors and actuators
      - Simulation length

    Attributes:
        spec: The experiment specification
        template_input_file: Path(relative to current dir or absolute) to the template XML
                             configuration file.
        cmdopts: Dictionary containing parsed cmdline options.
    """

    def __init__(self,
                 spec: ExperimentSpec,
                 template_input_file: str,
                 cmdopts: tp.Dict[str, tp.Any]) -> None:

        self.template_input_file = os.path.abspath(template_input_file)
        self.cmdopts = cmdopts
        self.spec = spec

    def generate(self) -> XMLLuigi:
        """
        Generates XML changes to simulation input files that are common to all experiments.
        """
        # create an object that will edit the XML file
        exp_def = XMLLuigi(self.template_input_file)

        # Setup library
        self._generate_library(exp_def)

        # Setup simulation visualizations
        self._generate_visualization(exp_def)

        # Setup threading
        self._generate_threading(exp_def)

        # Setup robot sensors/actuators
        self._generate_saa(exp_def)

        # Setup simulation time parameters
        self._generate_time(exp_def)

        return exp_def

    def _generate_saa(self, exp_def: XMLLuigi) -> None:
        """
        Generates XML changes to disable selected sensors/actuators, which are computationally
        expensive in large swarms, but not that costly if the # robots is small.

        Does not write generated changes to the simulation definition pickle file.
        """
        if not self.cmdopts["with_robot_rab"]:
            exp_def.tag_remove(".//media", "range_and_bearing", noprint=True)
            exp_def.tag_remove(".//actuators", "range_and_bearing", noprint=True)
            exp_def.tag_remove(".//sensors", "range_and_bearing", noprint=True)

        if not self.cmdopts["with_robot_leds"]:
            exp_def.tag_remove(".//actuators", "leds", noprint=True)
            exp_def.tag_remove(".//sensors", "colored_blob_omnidirectional_camera", noprint=True)
            exp_def.tag_remove(".//media", "led", noprint=True)

        if not self.cmdopts["with_robot_battery"]:
            exp_def.tag_remove(".//sensors", "battery", noprint=True)
            exp_def.tag_remove(".//entity/*", "battery", noprint=True)

    def _generate_time(self, exp_def: XMLLuigi) -> None:
        """
        Generate XML changes to setup simulation time parameters.

        Writes generated changes to the simulation definition pickle file.
        """
        tsetup = ts.factory(self.cmdopts["time_setup"])()

        adds, rms, chgs = utils.apply_to_expdef(tsetup, exp_def)

        # Write time setup info to file for later retrieval
        utils.pickle_modifications(adds, rms, chgs, self.spec.exp_def_fpath)

    def _generate_threading(self, exp_def: XMLLuigi) -> None:
        """
        Generates XML changes to set the # of cores for a simulation to use, which may be less than
        the total # available on the system, depending on the experiment definition and user
        preferences.

        Does not write generated changes to the simulation definition pickle file.
        """

        exp_def.attr_change(".//system",
                            "threads",
                            str(self.cmdopts["physics_n_engines"]))

    def _generate_library(self, exp_def: XMLLuigi) -> None:
        """
        Generates XML changes to set the library that controllers and loop functions are sourced
        from to the name of the plugin passed on the cmdline. The ``__controller__`` tag is changed
        during stage 1, but since this function is called as part of common def generation, it
        happens BEFORE that, and so this is OK. If, for some reason that assumption becomes invalid,
        a warning will be issued about a non-existent XML path, so it won't be a silent error.

        Does not write generated changes to the simulation definition pickle file.
        """
        exp_def.attr_change(".//loop_functions",
                            "library",
                            "lib" + self.cmdopts['project'])
        exp_def.attr_change(".//__controller__",
                            "library",
                            "lib" + self.cmdopts['project'])

    def _generate_visualization(self, exp_def: XMLLuigi) -> None:
        """
        Generates XML changes to remove visualization elements from input file, if configured to do
        so. This depends on cmdline parameters, as visualization definitions should be left in if
        ARGoS should output simulation frames for video creation.

        Does not write generated changes to the simulation definition pickle file.
        """

        if not self.cmdopts["argos_rendering"]:
            exp_def.tag_remove(".", "./visualization", noprint=True)  # ARGoS visualizations
        else:
            # Rendering must be processing before cameras, because it deletes the <qt_opengl>
            # tag if it exists, and then re-adds it.
            render = rendering.factory(self.cmdopts)
            utils.apply_to_expdef(render, exp_def, True)

            cams = cameras.factory(self.cmdopts, [self.spec.arena_dim])
            utils.apply_to_expdef(cams, exp_def, True)


class SimDefUniqueGenerator:
    """
    Generate XML changes unique to a simulation within an experiment.

    These include:
    - Random seeds for each simulation.
    - Output directories for each simulation.

    Attributes:
        sim_num: The simulation # in the experiment.
        sim_output_dir: Directory for simulation outputs in experiment root.
        cmdopts: Dictionary containing parsed cmdline options.
    """

    def __init__(self,
                 sim_num: int,
                 exp_output_root: str,
                 sim_output_dir: str,
                 cmdopts: tp.Dict[str, tp.Any]) -> None:

        self.exp_output_root = exp_output_root
        self.sim_output_dir = sim_output_dir
        self.cmdopts = cmdopts
        self.sim_num = sim_num

    @staticmethod
    def _generate_random(exp_def, random_seed):
        """
        Generate XML changes for random seeding for a specific simulation in an experiment during
        the input generation process.
        """

        # set the random seed in the config file
        exp_def.attr_change(".//experiment", "random_seed", str(random_seed))
        if exp_def.has_tag('.//params/rng'):
            exp_def.attr_change(".//params/rng", "seed", str(random_seed))
        else:
            exp_def.tag_add(".//params", "rng", {"seed": str(random_seed)})

    def generate(self, exp_def: XMLLuigi, random_seeds):
        # Setup simulation random seed
        self._generate_random(exp_def, random_seeds[self.sim_num])

        # Setup simulation rendering output
        self._generate_rendering(exp_def)

    def _generate_rendering(self, exp_def: XMLLuigi):
        """
        Generates XML changes for setting up rendering for a specific simulation
        """
        frames_fpath = os.path.join(self.exp_output_root,
                                    self.sim_output_dir,
                                    config.kARGoSFramesLeaf)
        exp_def.attr_change(
            ".//qt-opengl/frame_grabbing",
            "directory", frames_fpath, noprint=True)  # probably will not be present


class BatchedExpDefGenerator:
    """
    Class for generating experiment definitions for a batched experiment. Does not create the
    batched experiment after generation.

    Attributes:
        batch_config_template: Path (relative to current dir or absolute) to the root template
                               XML configuration file.

        batch_input_root: Root directory for all generated XML input files all experiments
                               should be stored (relative to current dir or absolute). Each
                               experiment will get a directory within this root to store the xml
                               input files for the simulation runs comprising an experiment;
                               directory name determined by the batch criteria used.

        batch_output_root: Root directory for all experiment outputs (relative to current dir or
                           absolute). Each experiment will get a directory 'exp<n>' in this
                           directory for its outputs.

        criteria: :class:`~sierra.core.variables.batch_criteria.BatchCriteria` derived object
                  instance created from cmdline definition.
        controller_name: Name of controller generator to use.
        scenario_basename: Name of scenario generator to use.
    """

    def __init__(self,
                 batch_config_template: str,
                 criteria: bc.IConcreteBatchCriteria,
                 controller_name: str,
                 scenario_basename: str,
                 cmdopts: tp.Dict[str, tp.Any]) -> None:
        assert os.path.isfile(batch_config_template),\
            "'{0}' is not a valid file".format(batch_config_template)

        self.batch_config_template = os.path.abspath(batch_config_template)
        self.batch_config_leaf, _ = os.path.splitext(
            os.path.basename(self.batch_config_template))
        self.batch_config_extension = None

        self.batch_input_root = os.path.abspath(cmdopts['batch_input_root'])
        assert self.batch_input_root.find(" ") == -1, \
            ("ARGoS (apparently) does not work with input file paths with spaces. Please make sure the " +
             "batch input root directory '{}' does not have any spaces in it").format(self.batch_input_root)

        self.batch_output_root = os.path.abspath(cmdopts['batch_output_root'])

        self.controller_name = controller_name
        self.scenario_basename = scenario_basename
        self.criteria = criteria
        self.cmdopts = cmdopts
        self.logger = logging.getLogger(__name__)

    def generate_defs(self) -> tp.List[sierra.core.xml_luigi.XMLLuigi]:
        """
        Generates and returns a list of experiment definitions (one for each experiment in the batch),
        which can used to create the batched experiment.
        """
        change_defs = self.criteria.gen_attr_changelist()

        # Create and run generators
        defs = []
        for i in range(0, len(change_defs)):
            generator = self._create_exp_generator(i)
            defs.append(generator.generate())
            self.logger.debug("Generating scenario+controller changes from generator '%s' for exp%s",
                              self.cmdopts['joint_generator'],
                              i)

        return defs

    def _create_exp_generator(self, exp_num: int):
        """
        Create the generator for a particular experiment from the scenario+controller definitions
        specified on the command line.

        Arguments:
            exp_num: Experiment number in the batch
        """

        spec = ExperimentSpec(self.criteria, exp_num, self.cmdopts)

        scenario = gf.scenario_generator_create(controller=self.controller_name,
                                                spec=spec,
                                                template_input_file=os.path.join(spec.exp_input_root,
                                                                                 self.batch_config_leaf),
                                                cmdopts=self.cmdopts)

        controller = gf.controller_generator_create(controller=self.controller_name,
                                                    config_root=self.cmdopts['project_config_root'],
                                                    cmdopts=self.cmdopts)

        self.cmdopts['joint_generator'] = '+'.join([controller.__class__.__name__,
                                                    scenario.__class__.__name__])

        return gf.joint_generator_create(scenario=scenario,
                                         controller=controller)


__api__ = [
    'ARGoSExpDefGenerator',
    'SimDefUniqueGenerator',
    'BatchedExpDefGenerator',
]
