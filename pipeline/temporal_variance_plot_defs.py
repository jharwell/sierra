"""
Copyright 2019, John Harwell, All rights reserved.

  This file is part of SIERRA.

  SIERRA is free software: you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  SIERRA is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with
  SIERRA.  If not, see <http://www.gnu.org/licenses/

"""

import os
import copy
import pandas as pd
import numpy as np
import yaml
import re

from pipeline.intra_exp_linegraphs import IntraExpLinegraphs
from pipeline.intra_exp_histograms import IntraExpHistograms
from pipeline.intra_exp_heatmaps import IntraExpHeatmaps
from variables.temporal_variance_parser import TemporalVarianceParser
import perf_measures.vcs as vcs


class TemporalVariancePlotDefs:
    """
    Generates definitions for temporal variance linegraphs to be generated by stage 4.

    Attributes:
      cmdopts(dict): Dictionary of commandline arguments used during intra-experiment graph
                     generation.
    """

    def __init__(self, cmdopts):
        self.cmdopts = copy.deepcopy(cmdopts)

    def __call__(self):
        tv_attr = TemporalVarianceParser().parse(self.cmdopts["criteria_def"])
        res = re.search("exp[0-9]+", self.cmdopts['output_root'])
        assert res is not None, "FATAL: Unexpected experiment output dir name '{0}'".format(
            self.cmdopts['output_root'])

        # The output root we have here is our averaged output directory in the output root for the
        # *current* experiment. Since adaptability/reactivity are generally inter-experiment
        # measures, we need to 'reset' the output root we pass to it the output root for the batched
        # experiment.
        output_root = self.cmdopts['output_root']
        self.cmdopts['output_root'] = self.cmdopts['output_root'].split(res.group())[0]
        exp_num = res.group()[3:]
        adaptability = vcs.AdaptabilityCS(self.cmdopts, exp_num)
        reactivity = vcs.ReactivityCS(self.cmdopts, exp_num)

        df = pd.DataFrame({'clock': vcs.DataFrames.expx_perf_df(self.cmdopts['output_root'],
                                                                exp_num)['clock'].values,
                           'expx_perf': vcs.DataFrames.expx_perf_df(self.cmdopts['output_root'],
                                                                    exp_num)['int_collected'].values,
                           'expx_var': vcs.DataFrames.expx_var_df(self.cmdopts['output_root'],
                                                                  exp_num)[tv_attr['variance_csv_col']].values,
                           'exp0_perf': vcs.DataFrames.exp0_perf_df(self.cmdopts['output_root'])['int_collected'].values,
                           'exp0_var': vcs.DataFrames.exp0_var_df(self.cmdopts['output_root'])[tv_attr['variance_csv_col']].values,
                           'ideal_reactivity': reactivity.calc_waveforms()[0][:, 1],
                           'ideal_adaptability': adaptability.calc_waveforms()[0][:, 1]})
        df.to_csv(os.path.join(output_root,
                               'tv-plots.csv'),
                  sep=';',
                  index=False)
        tv = [
            {'src_stem': 'tv-plots',
             'dest_stem': 'tv-plots-reactivity',
             'cols': ['expx_perf', 'expx_var', 'exp0_perf', 'exp0_var', 'ideal_reactivity'],
             'title': 'Observed vs. Ideal Reactivity Curves',
             'legend': ['Experimental Performance',
                        'Experimental Applied Variance',
                        'Ideal Conditions Performance',
                        'Ideal Conditions Variance',
                        'Ideal Reactivity'],
             'xlabel': 'Interval',
             'ylabel': 'Swarm Performance(# Blocks collected)',
             'styles': ['-', '--', '-', '--', '-']
             },
            {
                'src_stem': 'tv-plots',
                'dest_stem': 'tv-plots-adaptability',
                'cols': ['expx_perf', 'expx_var', 'exp0_perf', 'exp0_var', 'ideal_adaptability'],
                'title': 'Observed vs. Ideal Adaptability Curves',
                'legend': ['Experimental Performance',
                           'Experimental Applied Variance',
                           'Ideal Conditions Performance',
                           'Ideal Conditions Applied Variance',
                           'Ideal Adaptability'],
                'xlabel': 'Interval',
                'ylabel': 'Swarm Performance (# Blocks collected)',
                'styles': ['-', '--', '-', '--', '-']
            },
        ]
        return tv
