# Copyright 2020 John Harwell, All rights reserved.
#
#  This file is part of SIERRA.
#
#  SIERRA is free software: you can redistribute it and/or modify it under the
#  terms of the GNU General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later
#  version.
#
#  SIERRA is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
#  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with
#  SIERRA.  If not, see <http://www.gnu.org/licenses/
"""
Base classes for the mathematical models that SIERRA can generate and add to any configured graph
during stage 4.
"""

# Core packages

# 3rd party packages
import pandas as pd
import implements

# Project packages
from core.variables import batch_criteria as bc


class IConcreteIntraExpModel1D(implements.Interface):
    def run(self,
            cmdopts: dict,
            criteria: bc.IConcreteBatchCriteria,
            exp_num: int) -> pd.DataFrame:
        """
        Run the model and generate a dataframe from the results, which should contain a single
        column named ``model``.

        """

    def run_for_exp(self, criteria: bc.IConcreteBatchCriteria, cmdopts: dict, i: int) -> bool:
        """
        Some models may only be valid/make sense to run for a subset of experiments within a batch,
        so models can be selectively executed with this function.
        """

    def target_csv_stem(self) -> str:
        """
        Return the stem of the filename for the ``.csv`` file the model is targeting, sans parent
        directory path.
        """

    def legend_name(self) -> str:
        """
        Return the name of the model as it should appear on the legend of the target graph
        :class:`~core.graphs.stacked_line_graph.StackedLineGraph` it is attached to.
        """

    def previously_run(self, exp_num: int) -> bool:
        """
        Return if this model has previously been run on this invocation of SIERRA for the specified
        experiment. This enables all models to only be evaluated once per invocation (which might be
        very computationally expensive), even if they are later used as part of a larger more
        complex model.
        """


class IConcreteIntraExpModel2D(implements.Interface):
    def run(self,
            cmdopts: dict,
            criteria: bc.IConcreteBatchCriteria,
            exp_num: int) -> pd.DataFrame:
        """
        Run the model and generate a dataframe from the results, which should be a NxM grid (with N
        not necessarily equal to M).
        """

    def run_for_exp(self, criteria: bc.IConcreteBatchCriteria, cmdopts: dict, i: int) -> bool:
        """
        Some models may only be valid/make sense to run for a subset of experiments within a batch,
        so models can be selectively executed with this function.
        """

    def target_csv_stem(self) -> str:
        """
        Return the stem of the filename for the ``.csv`` file the model is targeting, sans parent
        directory path.
        """

    def previously_run(self, exp_num: int) -> bool:
        """
        Return if this model has previously been run on this invocation of SIERRA for the specified
        experiment. This enables all models to only be evaluated once per invocation (which might be
        very computationally expensive), even if they are later used as part of a larger more
        complex model.
        """


class IConcreteInterExpModel1D(implements.Interface):
    def run(self,
            cmdopts: dict,
            criteria: bc.IConcreteBatchCriteria) -> pd.DataFrame:
        """
        Run the model and generate a dataframe from the results. If this is a 1D model, then the
        dataframe should be a single row. If this is a 2D model, then the dataframe should be a NxM
        grid (with N not necessarily equal to M).
        """

    def run_for_batch(self, criteria: bc.IConcreteBatchCriteria, cmdopts: dict) -> bool:
        """
        Some models may only be valid/make sense to run for some batch criteria,
        so models can be selectively executed with this function.
        """

    def target_csv_stem(self) -> str:
        """
        Return the stem of the filename for the ``.csv`` file the model is targeting, sans parent
        directory path. Unlike intra-experiment models, inter-experiment models don't `have` to be
        attached to a ``.csv``/graph pair generated by the current project.
        """

    def legend_name(self) -> str:
        """
        Return the name of the model as it should appear on the legend of the target graph
        :class:`~core.graphs.stacked_line_graph.StackedLineGraph` it is attached to.
        """

    def previously_run(self) -> bool:
        """
        Return if this model has previously been run on this invocation of SIERRA. This enables all
        models to only be evaluated once per invocation (which might be very computationally
        expensive), even if they are later used as part of a larger more complex model.
        """


__api__ = ['IConcreteIntraExpModel1D',
           'IConcreteIntraExpModel2D',
           'IConcreteInterExpModel1D']
